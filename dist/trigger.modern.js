function t(r={}){const e=function(t,r){const e=Object.assign({},t);for(let o in t)e[o]=r.hasOwnProperty(o)?r[o]:t[o];return e}({targets:!1,init(){},action(){},root:null,mt:"0px",mr:"0px",mb:"0px",ml:"0px",margin:!1,t:Number.MIN_VALUE},r);if(!r.targets||!r.action)return void console.error('Trigger must have "targets & action" args');const o=document.querySelectorAll(e.targets);let n=e.root;null!==n&&(n=document.querySelector(n),o.forEach(t=>{n.contains(t)||console.error('"root" must be a parent for all "targets"!')}));const c=e.margin?e.margin:`${e.mt} ${e.mr} ${e.mb} ${e.ml}`;e.t<=0&&(e.t=Number.MIN_VALUE),e.t>1&&(e.t=1);const s=e.t;o.forEach(r=>{let o=t.counter;e.init(r),(t.observer[t.counter]=new IntersectionObserver(n=>{n[0].intersectionRatio>=s&&(e.action(r),t.observer[o].disconnect())},{root:n,rootMargin:c,threshold:s})).observe(r),t.counter++})}t.observer=[],t.counter=0;export default t;
