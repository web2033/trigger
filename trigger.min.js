function trigger(r={}){const t=function(r,t){const e=Object.assign({},r);for(let o in r)e[o]=t.hasOwnProperty(o)?t[o]:r[o];return e}({targets:!1,init(){},action(){},root:null,mt:"0px",mr:"0px",mb:"0px",ml:"0px",margin:!1,t:Number.MIN_VALUE},r);if(!r.targets||!r.action)return void console.error('Trigger must have "targets & action" args');const e=document.querySelectorAll(t.targets);let o=t.root;null!==o&&(o=document.querySelector(o),e.forEach(r=>{o.contains(r)||console.error('"root" must be a parent for all "targets"!')}));const n=t.margin?t.margin:`${t.mt} ${t.mr} ${t.mb} ${t.ml}`;t.t<=0&&(t.t=Number.MIN_VALUE),t.t>1&&(t.t=1);const i=t.t;e.forEach(r=>{let e=trigger.counter;t.init(r),trigger.observer[trigger.counter]=new IntersectionObserver(o=>{o[0].intersectionRatio>=i&&(t.action(r),trigger.observer[e].disconnect())},{root:o,rootMargin:n,threshold:i}),trigger.observer[trigger.counter].observe(r),trigger.counter++})}trigger.observer=[],trigger.counter=0;export default trigger;