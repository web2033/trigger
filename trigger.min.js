module.exports=function r(t={}){const e=function(r,t){const e=Object.assign({},r);for(let o in r)e[o]=t.hasOwnProperty(o)?t[o]:r[o];return e}({targets:!1,init(){},action(){},root:null,mt:"0px",mr:"0px",mb:"0px",ml:"0px",margin:!1,t:Number.MIN_VALUE},t);if(!t.targets||!t.action)return void console.error('Trigger must have "targets & action" args');const o=document.querySelectorAll(e.targets);let n=e.root;null!==n&&(n=document.querySelector(n),o.forEach(r=>{n.contains(r)||console.error('"root" must be a parent for all "targets"!')}));const c=e.margin?e.margin:`${e.mt} ${e.mr} ${e.mb} ${e.ml}`;e.t<=0&&(e.t=Number.MIN_VALUE),e.t>1&&(e.t=1);const s=e.t;o.forEach(t=>{let o=r.counter;e.init(t),r.observer[r.counter]=new IntersectionObserver(n=>{n[0].intersectionRatio>=s&&(e.action(t),r.observer[o].disconnect())},{root:n,rootMargin:c,threshold:s}),r.observer[r.counter].observe(t),r.counter++})},trigger.observer=[],trigger.counter=0;